<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>movies</string>
			<key>host</key>
			<string>localhost</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPSocketConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentFilter</key>
			<dict>
				<key>filterComparison</key>
				<string>=</string>
				<key>filterComparisonTag</key>
				<integer>0</integer>
				<key>filterField</key>
				<string>user_id</string>
				<key>filterValue</key>
				<string>547</string>
				<key>firstBetweenField</key>
				<string></string>
				<key>menuLabel</key>
				<string>`user_id` = '547'</string>
				<key>secondBetweenField</key>
				<string></string>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJSZYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiRYTlNPYmplY3Rf
			EA9OU0tleWVkQXJjaGl2ZXLRJyhUZGF0YYABAAgAEQAaACMALQAy
			ADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMA
			tQC3ALwAxwDQANsA3gDpAPIA9wEEAQcBEAEiASUBKgAAAAAAAAIB
			AAAAAAAAACkAAAAAAAAAAAAAAAAAAAEs
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 3601.5}, {805, 498}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>-- Select all columns and rows from the movies table

SELECT id, title, genres FROM movies; 

-- Select only the title and id of the first 10 rows

SELECT title, id FROM movies LIMIT 10;


-- Find the movie with the id of 485

SELECT id, title FROM movies WHERE id = 485;


-- Find the id (only that column) of the movie Made in America (1993)

SELECT id FROM movies WHERE title =  'Made in America (1993)'; 


-- Find the first 10 sorted alphabetically

SELECT id, title FROM movies  ORDER BY title ASC LIMIT 10;

-- Find all movies from 2002

 SELECT title FROM movies WHERE title LIKE '%2002%';

-- Find out what year the Godfather came out

 SELECT title FROM movies WHERE title LIKE '%Godfather%';

-- Without using joins find all the comedies

SELECT title, genres FROM movies WHERE genres LIKE '%comedy%';

-- Find all comedies in the year 2000
SELECT * FROM movies WHERE title LIKE '%(2000)%' and genres LIKE "%Comedy%";

-- Find any movies that are about death and are a comedy

SELECT * FROM movies WHERE title LIKE '%death%' and genres LIKE "%Comedy%";

-- Find any movies from either 2001 or 2002 with a title containing super

SELECT * FROM movies WHERE title LIKE '%super%' and title LIKE '%(2001)%';

-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

INSERT actors (`name`, `character_name`, `movie_id`, `dob` ) VALUES ('Tom Hanks', 'Woody', 1, '1956-07-09');


-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('John Doe', 'Jack', 2, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Jane Doe', 'Jill', 3, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Jack Doe', 'Joe', 4, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Tom Smith', 'Monster', 2, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Robert Smith', 'Hunter', 3, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Mary Smith', 'Victim', 4, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('George Brown', 'Mutant', 2, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Sam Brown', 'Scientist', 3, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Mike Brown', 'Assistant', 4, '2000-01-01');

INSERT actors (`name`, `character_name`, `movie_id`, `dob`) VALUES ('Oliver Black', 'Hero', 2, '2000-01-01');



-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating


UPDATE movies SET mpaa_rating = 'G' WHERE id = 1;

UPDATE movies SET mpaa_rating = 'PG' WHERE id = 2;

UPDATE movies SET mpaa_rating = 'PG-13' WHERE id = 3;

UPDATE movies SET mpaa_rating = 'R' WHERE id = 4;

UPDATE movies SET mpaa_rating = 'PG-13' WHERE id = 5;


-- WITH JOINS
-- Find all the ratings for the movie Godfather, show just the title and the rating

SELECT movies.title, ratings.rating FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE title='Godfather, The (1972)';  

-- Order the previous objective by newest to oldest

SELECT movies.title, ratings.rating FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE title='Godfather, The (1972)' ORDER BY ratings.timestamp DESC;  


-- Find the comedies from 2005 and get the title and imdbid from the links table

SELECT movies.title, links.imdb_id FROM movies LEFT JOIN links ON movies.id = links.movie_id WHERE title LIKE '%(2005)%' and genres LIKE '%comedy%';

-- Find all movies that have no ratings

SELECT movies.title, SUM(ratings.rating) FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE ratings.rating IS NULL GROUP BY movies.title;

-- Aggregation Objectives
-- Get the average rating for a movie

SELECT	movies.title, AVG(ratings.rating) FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE movies.title = "Toy Story (1995)" GROUP BY movies.title; 

-- Get the total ratings for a movie

SELECT movies.title, COUNT(ratings.rating) FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE movies.title = "Toy Story (1995)" GROUP BY movies.title; 

-- Get the total movies for a genre

SELECT movies.genres, COUNT(movies.title) FROM movies WHERE movies.genres ='comedy' GROUP BY movies.genres; 

-- Get the average rating for a user
SELECT ratings.user_id, AVG(ratings.rating) FROM ratings WHERE ratings.user_id = 1 GROUP BY ratings.user_id;

-- Find the user with the most ratings

SELECT ratings.user_id, COUNT(ratings.user_id) AS top FROM ratings GROUP BY ratings.user_id ORDER BY top DESC LIMIT 1;

-- Find the user with the highest average rating

SELECT ratings.user_id, AVG(ratings.rating) AS top FROM ratings GROUP BY  ratings.user_id ORDER BY top DESC LIMIT 1; 

-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.rating), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 1;

-- Find the movies with an average rating over 4

SELECT movies.title, AVG(ratings.rating) FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE ratings.rating &gt; 4 GROUP BY movies.title; 

</string>
			<key>table</key>
			<string>ratings</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>-- Find the movies with an average rating over 4

SELECT movies.title, AVG(ratings.rating) FROM movies LEFT JOIN ratings ON movies.id = ratings.movie_id WHERE ratings.rating &gt; 4 GROUP BY movies.title</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.rating), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 1</string>
		<string>-- Find the user with the highest average rating

SELECT ratings.user_id, AVG(ratings.rating) AS top FROM ratings GROUP BY  ratings.user_id ORDER BY top DESC LIMIT 1</string>
		<string>-- Find the user with the highest average rating

SELECT ratings.user_id, AVG(ratings.rating) AS top FROM ratings GROUP BY  ratings.user_id ORDER BY top DESC</string>
		<string>-- Find the user with the highest average rating

SELECT ratings.user_id, AVG(ratings.rating) AS top FROM ratings GROUP BY  ratings.user_id ORDER BY top DESC LIMIT 10</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.rating), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.rating), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY AVG(ratings.rating) DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.rating), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY AVG(ratings.user_id) DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.rating), COUNT(ratings.rating)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating

SELECT ratings.user_id, AVG(ratings.user_id) AS top FROM ratings GROUP BY  ratings.user_id ORDER BY top DESC LIMIT 1</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.ratings), COUNT(ratings.ratings)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY COUNT(ratings.user_id) DESC LIMIT 10</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY user_id DESC LIMIT 10</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id), COUNT(ratings.user_id)  FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY user_id DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id), COUNT(ratings.user_id) AS top FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY top DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id AS top FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY top DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id) AS top FROM ratings WHERE ratings.user_id &gt; 50 GROUP BY ratings.user_id ORDER BY top DESC LIMIT 3</string>
		<string>-- Find the user with the highest average rating with more than 50 reviews

SELECT ratings.user_id, AVG(ratings.user_id) AS top FROM ratings WHERE COUNT(ratings.user_id) &gt; 50 GROUP BY ratings.user_id ORDER BY top DESC LIMIT 3</string>
		<string>(ratings.user_id) AS top FROM ratings WHERE ratings.rating &gt; 50 GROUP BY ratings</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.21</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
